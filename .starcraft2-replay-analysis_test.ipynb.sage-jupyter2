{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-7c4530f8-ba10-4fe1-b9b6-15db136a0365.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1642755780623,"exec_count":6,"id":"7210b3","input":"!git push origin main","kernel":"python3","output":{"0":{"name":"stdout","text":"error: src refspec main does not match any\r\n\u001b[31merror: failed to push some refs to 'https://github.com/honglu2875/sc2-replay-mining.git'\r\n\u001b[m"}},"pos":7,"start":1642755780460,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"7ed938","input":"# We install the prerequisites using the `!pip install` syntax here.\n# In some cases, running pip install from a notebook may require a one-time kernel restart. Check the output for messages.\n!pip install --user cloudant==2.10.2 --quiet\n!pip install --user bokeh==0.12.10 --quiet\n!pip install --user seaborn==0.9.0 --quiet\n#!pip install --user sc2reader==1.3.1 # sc2reader==1.3.1 only works for replay version 44401\n!pip install --user git+https://github.com/ggtracker/sc2reader.git --quiet # the old sc2reader is dead. This is the up-to-date fork","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"2fd5f1","input":"replay_object = ReplayData.parse_replay(replay=replay)\nreplay_dict = replay_object.as_dict()\n\nplayers = {}\nfor player in replay_dict[\"winners\"]:\n    players[int(player[0])] = {\"full\": \"Winning Player {num}: {name} ({race})\".format(num=player[0], name=player[1], race=player[2]),\n                               \"short\": \"{name} ({race})\".format(name=player[1], race=player[2]) }\nfor player in replay_dict[\"losers\"]:\n    players[int(player[0])] = {\"full\": \"Losing Player {num}: {name} ({race})\".format(num=player[0], name=player[1], race=player[2]),\n                               \"short\": \"{name} ({race})\".format(name=player[1], race=player[2]) }\n\necon = [\"mineral_collection_rate\", \"vespene_collection_rate\", \"workers_active\", \"supply_utilization\", \"worker_supply_ratio\"]\nunits = [\"Minerals per Minute (MPM)\", \"Vespene per Minute (VPM)\", \"Workers\", \"Supply Used / Supply Available\", \"Workers / Supply Used\"]\n\nplayer_charts = defaultdict(dict)\nplayer_aggregate = defaultdict(dict)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"e40f0e","input":"import sys, importlib\nsys.path.append(\"../\")\nfrom util.event_parser import *\nfrom util.replay_data import *\nfrom util.visualization import *\nimport pandas as pd\nfrom collections import defaultdict\nfrom traceback import print_exc\n\nfrom bokeh.io import output_notebook, reset_output\nfrom bokeh.models import Span, Range1d, Legend, BoxAnnotation, HoverTool, Arrow, NormalHead\nfrom bokeh.plotting import figure, show, gridplot, ColumnDataSource\n\n%load_ext autoreload\n%autoreload 2\n\noutput_notebook()\n\n# Some extra code here helps catch setup errors.\ntry:\n    #replay_file = \"king_sejong_station_le.sc2replay\"\n    replay_file = \"replay/Lower Final/Serral VS Trap LB Final - Game 1.SC2Replay\"\nexcept NameError:\n    print('\\n'\n          'SETUP ERROR: Please follow the directions to add a .SC2Replay file and use\\n'\n          '             \"Insert to code\" to set the streaming_body_1 variable to the resulting bytes.\\n'\n          '             You may need to rename the data_* variable.')\n    raise\n\nreplay = sc2reader.load_replay(\n    replay_file,\n    engine=sc2reader.engine.GameEngine(plugins=[ContextLoader(), APMTracker(), SelectionTracker()]))\n\nprint(\"Replay successfully loaded.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n"},"1":{"name":"stderr","output_type":"stream","text":"/home/user/SC_Replay_mining/util/visualization.py:217: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  right=timeseries[rng[1]] / 16,\n/home/user/SC_Replay_mining/util/visualization.py:224: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  right=timeseries[rng[1]] / 16,\n/home/user/SC_Replay_mining/util/visualization.py:235: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  y_start=src[rng[0]],\n/home/user/SC_Replay_mining/util/visualization.py:246: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  y_start=src[rng[0]],\n"},"2":{"data":{"text/html":"\n    <div class=\"bk-root\">\n        <a href=\"https://bokeh.pydata.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n        <span id=\"36935003-1a5e-4083-bc30-90044f003a79\">Loading BokehJS ...</span>\n    </div>"},"exec_count":24,"output_type":"execute_result"},"3":{"data":{"application/javascript":"\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  var JS_MIME_TYPE = 'application/javascript';\n  var HTML_MIME_TYPE = 'text/html';\n  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n  var CLASS_NAME = 'output_bokeh rendered_html';\n\n  /**\n   * Render data to the DOM node\n   */\n  function render(props, node) {\n    var script = document.createElement(\"script\");\n    node.appendChild(script);\n  }\n\n  /**\n   * Handle when an output is cleared or removed\n   */\n  function handleClearOutput(event, handle) {\n    var cell = handle.cell;\n\n    var id = cell.output_area._bokeh_element_id;\n    var server_id = cell.output_area._bokeh_server_id;\n    // Clean up Bokeh references\n    if (id !== undefined) {\n      Bokeh.index[id].model.document.clear();\n      delete Bokeh.index[id];\n    }\n\n    if (server_id !== undefined) {\n      // Clean up Bokeh references\n      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n      cell.notebook.kernel.execute(cmd, {\n        iopub: {\n          output: function(msg) {\n            var element_id = msg.content.text.trim();\n            Bokeh.index[element_id].model.document.clear();\n            delete Bokeh.index[element_id];\n          }\n        }\n      });\n      // Destroy server and session\n      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n      cell.notebook.kernel.execute(cmd);\n    }\n  }\n\n  /**\n   * Handle when a new output is added\n   */\n  function handleAddOutput(event, handle) {\n    var output_area = handle.output_area;\n    var output = handle.output;\n\n    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n      return\n    }\n\n    var toinsert = output_area.element.find(`.${CLASS_NAME.split(' ')[0]}`);\n\n    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n      toinsert[0].firstChild.textContent = output.data[JS_MIME_TYPE];\n      // store reference to embed id on output_area\n      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n    }\n    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n      var bk_div = document.createElement(\"div\");\n      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n      var script_attrs = bk_div.children[0].attributes;\n      for (var i = 0; i < script_attrs.length; i++) {\n        toinsert[0].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n      }\n      // store reference to server id on output_area\n      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n    }\n  }\n\n  function register_renderer(events, OutputArea) {\n\n    function append_mime(data, metadata, element) {\n      // create a DOM node to render to\n      var toinsert = this.create_output_subarea(\n        metadata,\n        CLASS_NAME,\n        EXEC_MIME_TYPE\n      );\n      this.keyboard_manager.register_events(toinsert);\n      // Render to node\n      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n      render(props, toinsert[0]);\n      element.append(toinsert);\n      return toinsert\n    }\n\n    /* Handle when an output is cleared or removed */\n    events.on('clear_output.CodeCell', handleClearOutput);\n    events.on('delete.Cell', handleClearOutput);\n\n    /* Handle when a new output is added */\n    events.on('output_added.OutputArea', handleAddOutput);\n\n    /**\n     * Register the mime type and append_mime function with output_area\n     */\n    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n      /* Is output safe? */\n      safe: true,\n      /* Index of renderer in `output_area.display_order` */\n      index: 0\n    });\n  }\n\n  // register the mime type if in Jupyter Notebook environment and previously unregistered\n  if (root.Jupyter !== undefined) {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  }\n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n    }\n    finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.info(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(js_urls, callback) {\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = js_urls.length;\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var s = document.createElement('script');\n      s.src = url;\n      s.async = false;\n      s.onreadystatechange = s.onload = function() {\n        root._bokeh_is_loading--;\n        if (root._bokeh_is_loading === 0) {\n          console.log(\"Bokeh: all BokehJS libraries loaded\");\n          run_callbacks()\n        }\n      };\n      s.onerror = function() {\n        console.warn(\"failed to load library \" + url);\n      };\n      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.getElementsByTagName(\"head\")[0].appendChild(s);\n    }\n  };var element = document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\");\n  if (element == null) {\n    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '36935003-1a5e-4083-bc30-90044f003a79' but no matching script tag was found. \")\n    return false;\n  }\n\n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-0.12.10.min.js\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n    },\n    function(Bokeh) {\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.css\");\n    }\n  ];\n\n  function run_inline_js() {\n    \n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(js_urls, function() {\n      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));","application/vnd.bokehjs_load.v0+json":"\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof (root._bokeh_onload_callbacks) === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) { callback() });\n    }\n    finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.info(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(js_urls, callback) {\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.log(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.log(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = js_urls.length;\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var s = document.createElement('script');\n      s.src = url;\n      s.async = false;\n      s.onreadystatechange = s.onload = function() {\n        root._bokeh_is_loading--;\n        if (root._bokeh_is_loading === 0) {\n          console.log(\"Bokeh: all BokehJS libraries loaded\");\n          run_callbacks()\n        }\n      };\n      s.onerror = function() {\n        console.warn(\"failed to load library \" + url);\n      };\n      console.log(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.getElementsByTagName(\"head\")[0].appendChild(s);\n    }\n  };var element = document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\");\n  if (element == null) {\n    console.log(\"Bokeh: ERROR: autoload.js configured with elementid '36935003-1a5e-4083-bc30-90044f003a79' but no matching script tag was found. \")\n    return false;\n  }\n\n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-0.12.10.min.js\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    \n    function(Bokeh) {\n      \n    },\n    function(Bokeh) {\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.10.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.10.min.css\");\n      console.log(\"Bokeh: injecting CSS: https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.css\");\n      Bokeh.embed.inject_css(\"https://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.10.min.css\");\n    }\n  ];\n\n  function run_inline_js() {\n    \n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"36935003-1a5e-4083-bc30-90044f003a79\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.log(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(js_urls, function() {\n      console.log(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"},"exec_count":24,"output_type":"execute_result"},"4":{"name":"stdout","output_type":"stream","text":"Replay successfully loaded.\n"}},"pos":1,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"63830d","input":"for pid, player in players.items():\n    for ndx, process in enumerate(econ):\n        # Generate charts per player\n        timeseries = [k[0] for k in replay_dict[\"stats\"][pid][process]]\n        proc_data = [j[1] for j in replay_dict[\"stats\"][pid][process]]\n\n        player_charts[pid][process], limits, v_min, v_max, game_length = nelson_rules_chart_generator(\n            pd.Series(proc_data),\n            timeseries,\n            player[\"full\"],\n            pid,\n            process,\n            units[ndx],\n            replay,\n            fixed_lcl=0)\n        player_aggregate[process][pid] = proc_data\n\ngrid = [[player_charts[k][measurement] for k in player_charts] for ndx, measurement in enumerate(econ)]\n\nshow(gridplot(grid, sizing_mode=\"scale_width\"))","output":{"0":{"data":{"text/html":"\n<div class=\"bk-root\">\n    <div class=\"bk-plotdiv\" id=\"56f887cf-bcd6-46fa-84b0-2f9f36303461\"></div>\n</div>"},"exec_count":25,"output_type":"execute_result"},"1":{"more_output":true}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"d79083","input":"import seaborn\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig, axes = plt.subplots(nrows=len(grid),ncols=1,figsize=(15,20))\n\nfor ndx in range(len(grid)):\n\n    sample_max = min([len(player_aggregate[econ[ndx]][j]) for j in player_aggregate[econ[ndx]].keys()])\n    # Remember, we are removing the first 20 samples (beginning of game should be the same for all, so data is useless)\n    frame = pd.DataFrame({ units[ndx]: [player_aggregate[econ[ndx]][1][k] for k in range(2,sample_max)] + [player_aggregate[econ[ndx]][2][l] for l in range(2,sample_max)],\n                           \"Player\": [players[(i//sample_max) + 1][\"short\"] for i in range(0,len(players.keys())*(sample_max - 2))]})\n    \n    bp = seaborn.boxplot(x=units[ndx], orient=\"h\", y='Player',  data=frame,  width=0.5, palette=\"muted\", ax=axes[ndx])\n    bp = seaborn.swarmplot(x=units[ndx], y='Player', data=frame,  color='gold', alpha=0.5, ax=axes[ndx])\n\nplt.show()","output":{"0":{"data":{"image/png":"17d7e38bb7c12738c9060177e34cdd27aa8316ab","text/plain":"<Figure size 1080x1440 with 5 Axes>"},"exec_count":26,"metadata":{"image/png":{"height":1131,"width":940},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"fd4983","input":"print(\"Date: %s\" % replay.date)\nprint(\"Map Name: \" + replay.map_name)\nfor player in replay.players:\n    print(\"%s: %s\" % (player.result, player))","output":{"0":{"name":"stdout","output_type":"stream","text":"Date: 2021-12-12 15:27:26\nMap Name: Berlingrad LE\nWin: Player 1 - Serral (Zerg)\nLoss: Player 2 - Trap (Protoss)\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1e0d1a","input":"!git init -b main","output":{"0":{"name":"stdout","output_type":"stream","text":"error: unknown switch `b'\r\nusage: git init [-q | --quiet] [--bare] [--template=<template-directory>] [--shared[=<permissions>]] [<directory>]\r\n\r\n    --template <template-directory>\r\n                          directory from which templates will be used\r\n    --bare                create a bare repository\r\n    --shared[=<permissions>]\r\n                          specify that the git repository is to be shared amongst several users\r\n    -q, --quiet           be quiet\r\n    --separate-git-dir <gitdir>\r\n                          separate git dir from working tree\r\n\r\n"}},"pos":6,"type":"cell"}
{"id":"0eedad","input":"","pos":8,"type":"cell"}
{"id":0,"time":1642751812482,"type":"user"}
{"last_load":1642755413782,"type":"file"}